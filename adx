#!/usr/bin/env python2

import argparse
import sys
import util

parser = argparse.ArgumentParser(
    description='This script provides a variety of tools for managing the'
                ' ADX development environment.'
)
subparsers = parser.add_subparsers(
    title='Actions',
    description='Choose which action to take.',
    metavar='action',
    dest='action'
)
actions = {}
actions['up'] = actions['dc'] = subparsers.add_parser(
    'up',
    description="Start docker containers (docker-compose).",
    help="Start docker containers (docker-compose)."
)
actions['up'].set_defaults(func=util.up)

actions['stop'] = subparsers.add_parser(
    'stop',
    description="Stop docker containers (docker-compose).",
    help="Stop docker containers (docker-compose)."
)
actions['stop'].set_defaults(func=util.run_docker_compose)

actions['down'] = subparsers.add_parser(
    'down',
    description="Stop and destroy docker containers (docker-compose).",
    help="Stop and destroy docker containers (docker-compose)."
)
actions['down'].set_defaults(func=util.run_docker_compose)

actions['restart'] = subparsers.add_parser(
    'restart',
    description="Restart docker containers (docker-compose).",
    help="Restart docker containers (docker-compose)."
)
actions['restart'].set_defaults(func=util.run_docker_compose)

actions['build'] = subparsers.add_parser(
    'build',
    description="Restart docker containers (docker-compose).",
    help="Restart docker containers (docker-compose)."
)
actions['build'].set_defaults(func=util.run_docker_compose)

actions['logs'] = subparsers.add_parser(
    'logs',
    description="Open the logs for a service (docker-compose)",
    help="Open the logs for a service (docker-compose)"
)
actions['logs'].set_defaults(func=util.run_docker_compose)

actions['dc'] = subparsers.add_parser(
    'dc',
    description="Run any docker-compose command.",
    help='Run any docker-compose command'
)
actions['dc'].set_defaults(func=util.run_docker_compose)

actions['exec'] = subparsers.add_parser(
    'exec',
    description="Run any docker-compose exec command.",
    help='Run any docker-compose exec command.'
)
actions['exec'].set_defaults(func=util.run_docker_compose)

# Docker exec bash
actions['bash'] = subparsers.add_parser(
    'bash',
    description="Open a bash prompt in the specified container.",
    help='Open a bash prompt in the specified container'
)
actions['bash'].set_defaults(func=util.run_docker_compose)
actions['bash'].add_argument('container', metavar='container', type=str,
                             help='The service name e.g."frontend."')


# Add the Google repo command arguments
actions['sync'] = subparsers.add_parser(
    'sync',
    description='Runs the Google Repo "sync" command',
    help='Sync the Meerkat code base with Github (Google Repo)',
    add_help=False
)
actions['sync'].set_defaults(func=util.run_repo)

actions['status'] = subparsers.add_parser(
    'status',
    description='Runs the Google Repo "status" command',
    help='Print out the Git status messages for all Meerkat Git repositories '
         '(Google repo)',
    add_help=False
)
actions['status'].set_defaults(func=util.run_repo)

actions['diff'] = subparsers.add_parser(
    'diff',
    description='Runs the Google Repo "" command',
    help='View the Git diff messages for all Meerkat Git repositories '
         '(Google repo)',
    add_help=False
)
actions['diff'].set_defaults(func=util.run_repo)

actions['forall'] = subparsers.add_parser(
    'forall',
    description='Runs the Google Repo "forall" command',
    help='Run a shell command in all Git repositories (Google repo)',
    add_help=False
)
actions['forall'].set_defaults(func=util.run_repo)

actions['repo'] = subparsers.add_parser(
    'repo',
    description='Run any Google repo command',
    help='Run any Google Repo command',
    add_help=False
)
actions['repo'].set_defaults(func=util.run_repo)

# Add the setup command arguments
actions['setup'] = subparsers.add_parser(
    'setup',
    description='Sets up the Meerkat code base locally',
    help='Sets up the Meerkat codebase locally (Google repo).',
)
actions['setup'].add_argument(
    '-m', '--manifest',
    help='Specify the particular manifest which defines the dev env you want '
         'to run  N.B. some manifests may require extra access to Git repos.',
    choices=['all.xml', 'deafult.xml']
)
actions['setup'].set_defaults(func=util.setup)

actions['init'] = subparsers.add_parser(
    'init',
    description="Initializes ADX project using google repo.",
    help="Configures the already existing ADX codebase with already "
         "checkout repositories (Google repo)."
)
actions['init'].set_defaults(func=util.init)

actions['init'].add_argument(
    '-m', '--manifest',
    help='Specify the particular manifest which defines the dev env you want '
         'to run  N.B. some manifests may require extra access to Git repos.',
    choices=['all.xml', 'deafult.xml']
)
# Add the setup command arguments
actions['initCkanDb'] = subparsers.add_parser(
    'initCkanDb',
    description='Runs the initial configuration for CKAN plugins. Should be run'
                'after the initial Ckan startup',
    help='Performs initial CKAN database setup.',
)
actions['initCkanDb'].set_defaults(func=util.init_ckan_db)

def main(orig_args):
    # Parse both args we recognise
    args, extra_args = parser.parse_known_args(orig_args)
    if hasattr(args, 'func'):
        # Parse the args!
        args.func(args, extra_args)
    else:
        parser.print_help()

if __name__ == '__main__':
    main(sys.argv[1:])
